#ifndef LIST_H
#define LIST_H

#include "exception.h"
#include "node.h"

/////////////////////////////////////////////////////////////////////////////
/// @file list.h
/// @author Doug Kelly - CS153 Sec. B
/// @brief Templated linked-list container header file
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @class Slist
/// @brief Templated linked-list class
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn push_front
/// @brief Add one item to front of list
/// @pre none
/// @post Item is added to front of list, size is increased by one
/// @param Item to be added to list
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn pop_front
/// @brief Remove first item from vector
/// @pre List must have a size greater than one.
/// @post Size of list decreased by one, first item in list is removed.
/// @param none
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn push_back
/// @brief Add one item to back of list
/// @pre none
/// @post Item is added to back of list, size is increased by one
/// @param Item to be added to list
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn pop_back
/// @brief Remove last item from vector
/// @pre List must have a size greater than one.
/// @post Size of list decreased by one, last item in list is removed.
/// @param none
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn remove
/// @brief Removes first instance of item found in list
/// @pre Item exists in list
/// @post First instance of item removed from list, size decreased by one.
/// @param Item to be removed.
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn front
/// @brief Returns element at front of list
/// @pre At least one element in list
/// @post none
/// @param none
/// @return Element at front of list.
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn back
/// @brief Returns element at end of list
/// @pre At least one element in list
/// @post none
/// @param none
/// @return Element at end of list.
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn clear
/// @brief Empty all items in list
/// @pre none
/// @post All elements removed, list is reset to original state.
/// @param none
/// @return none
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn size
/// @brief Returns current size of list
/// @pre none
/// @post none
/// @param none
/// @return Current size of list.
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/// @fn empty
/// @brief Returns true if list is empty
/// @pre none
/// @post none
/// @param none
/// @return True if list is empty; false otherwise.
/////////////////////////////////////////////////////////////////////////////

template <class generic> class List
{
	public:
		List();
		~List();
		void push_front(generic x);
		void pop_front();
		void push_back(generic x);
		void pop_back();
		void remove(generic x);
		generic &front();
		generic &back();
		void clear();
		unsigned int size();
		bool empty();

	private:
		unsigned int m_size;
		Node<generic> *m_front;
		Node<generic> *m_back;
};

#include "list.hpp"
#endif
